@model SchoolProject.WebApplication.ViewModels.RegisterPerformanceYearReviewPeriodLink
@using SchoolProject.WebApplication.ViewModels;

@{
    ViewBag.Title = "Admin";
}

@switch (Model.FormMode) {
    case FormModeOption.CREATE: {
            <h2>Link Performance Year Review Period</h2>
            break;
        }
    case FormModeOption.EDIT: {
            <h2>Update Performance Year Review Period</h2>
            break;
        }
    case FormModeOption.DELETE: {
            <h2>Remove Performance Year Review Period</h2>
            break;
        }
}

<hr />

@using (Html.BeginForm("ManagePerformanceYearReviewPeriodLink", "Administration", FormMethod.Post, new { @id = "PerformanceYearReviewPeriodForm" })) {
    @Html.HiddenFor(model => model.FormMode)

    var formModes = Enum.GetValues(typeof(FormModeOption)).Cast<FormModeOption>().Where(i => i == FormModeOption.DELETE ||
                                                                                       i == FormModeOption.EDIT).ToList();
    if (formModes.Contains(Model.FormMode)) {
        @Html.HiddenFor(model => model.PMReviewPeriodId)
    }
    for (int i = 0; i < Model.PerformanceYears.Count; i++) {
        @Html.HiddenFor(model => Model.PerformanceYears[i].ValueText)
        @Html.HiddenFor(model => Model.PerformanceYears[i].DisplayText)
    }
    for (int i = 0; i < Model.ReviewPeriods.Count; i++) {
        @Html.HiddenFor(model => Model.ReviewPeriods[i].ValueText)
        @Html.HiddenFor(model => Model.ReviewPeriods[i].DisplayText)
    }

    @*Display Error messages*@
if (!ViewData.ModelState.IsValid) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.ValidationSummary(true)
            </p>
        </div>
    </div>
}

    @*Display Processing Status*@
if ((!string.IsNullOrEmpty(Model.ProcessingStatusMessage)) && (Model.ProcessingStatus)) {
    <div class="row">
        <div class="alert alert-success alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.Raw(Model.ProcessingStatusMessage)
            </p>
        </div>
    </div>
}

    @*Display Processing Status*@
if ((!string.IsNullOrEmpty(Model.ProcessingStatusMessage)) && (!Model.ProcessingStatus)) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.Raw(Model.ProcessingStatusMessage)
            </p>
        </div>
    </div>
}

if (Model.FormMode == FormModeOption.DELETE) {
    @Html.HiddenFor(x => x.ReviewPeriodId)
        @Html.HiddenFor(x => x.ReviewPeriodId)

        <div class="row">
            <div class="alert alert-danger alert-dismissable">
                <p>
                    @{
                        var year = Model.PerformanceYears.FirstOrDefault(x => x.ValueText == Model.PerformanceYearId.ToString()).DisplayText;
                        var review = Model.ReviewPeriods.FirstOrDefault(x => x.ValueText == Model.ReviewPeriodId.ToString()).DisplayText;
                    }
                    Are you sure you want to remove Performance Year (@year ) - Review(@review) Link?
                </p>
            </div>
        </div>
                        }

                        <div class="row">
                            <div class="col-md-8">

                                @if (Model.FormMode != FormModeOption.DELETE) {
                                    <div class="row">
                                        @Html.Label("Performance Year", htmlAttributes: new { @class = "control-label" })<br />
                                        @Html.DropDownList("PerformanceYearId", new SelectList(Model.PerformanceYears, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Performance Year"), new { @class = "form-control", @required = true })
                                        @Html.ValidationMessageFor(model => model.PerformanceYearId, "", new { @class = "text-danger" })
                                     </div>
                                    <div class="row">
                                        @Html.Label("Review Period", htmlAttributes: new { @class = "control-label" })<br />
                                        @Html.DropDownList("ReviewPeriodId", new SelectList(Model.ReviewPeriods, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Review Period"), new { @class = "form-control", @required = true })
                                        @Html.ValidationMessageFor(model => model.ReviewPeriodId, "", new { @class = "text-danger" })
                                    </div>
                                }
                                else {
                                    <div class="row">
                                        @Html.Label("Performance Year", htmlAttributes: new { @class = "control-label" })<br />
                                        @Html.DropDownList("PerformanceYearId", new SelectList(Model.PerformanceYears, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Performance Year"), new { @class = "form-control", @disabled = "disabled" })
                                    </div>
                                    <div class="row">
                                        @Html.Label("Review Period", htmlAttributes: new { @class = "control-label" })<br />
                                        @Html.DropDownList("ReviewPeriodId", new SelectList(Model.ReviewPeriods, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Review Period"), new { @class = "form-control", @disabled = "disabled" })
                                    </div>
                                }
                                <br />
                                <div class="row">
                                    <a href="@Url.Action("PerformanceReviewPeriodLinking", "Administration")" class="btn btn-md btn-primary" role="button">
                                        <span class="glyphicon glyphicon-chevron-left glyphicon-chevron-left">
                                        </span>&nbsp;Back To Link Performance Year Review Period Listing
                                    </a>
                                    @switch (Model.FormMode) {
                                        case FormModeOption.CREATE: {
                                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-primary">
                                                    <span class="glyphicon glyphicon-plus">
                                                    </span>&nbsp;Link Performance Year Review Period
                                                </button>
                                                break;
                                            }
                                        case FormModeOption.EDIT: {
                                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-primary">
                                                    <span class="glyphicon glyphicon-pencil">
                                                    </span>&nbsp;Update Performance Year Review Period Details
                                                </button>
                                                break;
                                            }
                                        case FormModeOption.DELETE: {
                                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-danger">
                                                    <span class="glyphicon glyphicon-remove">
                                                    </span>&nbsp;Remove Performance Year Review Period Link
                                                </button>
                                                break;
                                            }
                                        default: {
                                                break;
                                            }
                                    }
                                </div>
                                <br />
                            </div>
                        </div>
                        }