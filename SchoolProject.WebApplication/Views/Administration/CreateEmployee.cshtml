@model SchoolProject.WebApplication.ViewModels.RegisterEmployee

@{
    ViewBag.Title = "Create Employee";
}

<h2>Create Employee</h2>
<hr />

@using (Html.BeginForm("CreateEmployee", "Administration", FormMethod.Post, new { @id = "SelectBenefit" })) {
    @Html.HiddenFor(model => model.FormMode)
    if (Model.FormMode == SchoolProject.WebApplication.ViewModels.FormModeOption.EDIT) {
        @Html.HiddenFor(model => model.EmployeeRecordId)
    }
    for (int i = 0; i < Model.JobGrade.Count; i++) {
        @Html.HiddenFor(model => Model.JobGrade[i].ValueText)
        @Html.HiddenFor(model => Model.JobGrade[i].DisplayText)
    }
    for (int i = 0; i < Model.Team.Count; i++) {
        @Html.HiddenFor(model => Model.Team[i].ValueText)
        @Html.HiddenFor(model => Model.Team[i].DisplayText)
    }

    @*Display Error messages*@
if (!ViewData.ModelState.IsValid) {
        <div class="row">
            <div class="alert alert-danger alert-dismissable">
                <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                <p>
                    @Html.ValidationSummary(true)
                </p>
            </div>
        </div>
    }

    @*Display Processing Status*@
if (!string.IsNullOrEmpty(Model.ProcessingStatusMessage)) {
        <div class="row">
            <div class="alert alert-success alert-dismissable">
                <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                <p>
                    @Html.Raw(Model.ProcessingStatusMessage)
                </p>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-6">
            <div class="row">
                @Html.Label("Employee Code", htmlAttributes: new { @class = "control-label" })<br />
                @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control", @required = true } })
                @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
            </div>

            <div class="row">
                @Html.Label("Employee Name", htmlAttributes: new { @class = "control-label" })<br />
                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control", @required = true } })
                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
            </div>

            <div class="row">
                @Html.Label("Employee Surname", htmlAttributes: new { @class = "control-label" })<br />
                @Html.EditorFor(model => model.EmployeeSurname, new { htmlAttributes = new { @class = "form-control", @required = true } })
                @Html.ValidationMessageFor(model => model.EmployeeSurname, "", new { @class = "text-danger" })
            </div>

            <div class="row">
                @Html.Label("Network Username", htmlAttributes: new { @class = "control-label" })<br />
                @Html.EditorFor(model => model.NetworkUsername, new { htmlAttributes = new { @class = "form-control", @required = true } })
                @Html.ValidationMessageFor(model => model.NetworkUsername, "", new { @class = "text-danger" })
            </div>

            <div class="row">
                @Html.Label("Team", htmlAttributes: new { @class = "control-label" })<br />
                @Html.DropDownList("TeamId", new SelectList(Model.Team, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Team"), new { @class = "form-control", @required = true, @Placeholder = Html.DisplayNameFor(m => m.TeamId) })
                @Html.ValidationMessageFor(model => model.TeamId, "", new { @class = "text-danger" }) 
            </div>

            <div class="row">
                @Html.Label("Job Grade", htmlAttributes: new { @class = "control-label" })<br />
                @Html.DropDownList("JobGradeId", new SelectList(Model.JobGrade, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Job Grade"), new { @class = "form-control", @required = true, @Placeholder = Html.DisplayNameFor(m => m.TeamId) })
                @Html.ValidationMessageFor(model => model.JobGradeId, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="row">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create Employee" class="btn btn-primary" />
                </div>
            </div>
            <br />
        </div>

    </div>

}



