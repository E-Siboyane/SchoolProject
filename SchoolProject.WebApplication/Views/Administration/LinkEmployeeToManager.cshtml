@model SchoolProject.WebApplication.ViewModels.LinkEmployeeManager
@using SchoolProject.WebApplication.ViewModels;

@{
    ViewBag.Title = "LinkEmployeeToManager";
}

@switch (Model.FormMode) {
    case FormModeOption.CREATE: {
            <h2>Link Employee To Manager</h2>
            break;
        }
    case FormModeOption.EDIT: {
            <h2>Update Employee Manager</h2>
            break;
        }
    case FormModeOption.DELETE: {
            <h2>Remove Employee Manager Link</h2>
            break;
        }
}

<hr />

@using (Html.BeginForm("ManageEmployeeManager", "Administration", FormMethod.Post, new { @id = "ManageEmployeeManagerLinkForm" })) {
    @Html.HiddenFor(model => model.FormMode)

    var formModes = Enum.GetValues(typeof(FormModeOption)).Cast<FormModeOption>().Where(i => i == FormModeOption.DELETE ||
                                                                                       i == FormModeOption.EDIT).ToList();
    if (formModes.Contains(Model.FormMode)) {
        @Html.HiddenFor(model => model.EmployeeReportingRecordId)
    }
    for (int i = 0; i < Model.Managers.Count; i++) {
        @Html.HiddenFor(model => Model.Managers[i].ValueText)
        @Html.HiddenFor(model => Model.Managers[i].DisplayText)
    }
    for (int i = 0; i < Model.Employees.Count; i++) {
        @Html.HiddenFor(model => Model.Employees[i].ValueText)
        @Html.HiddenFor(model => Model.Employees[i].DisplayText)
    }
    for (int i = 0; i < Model.DocumentTypes.Count; i++) {
        @Html.HiddenFor(model => Model.DocumentTypes[i].ValueText)
        @Html.HiddenFor(model => Model.DocumentTypes[i].DisplayText)
    }

    @*Display Error messages*@
if (!ViewData.ModelState.IsValid) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.ValidationSummary(true)
            </p>
        </div>
    </div>
}

    @*Display Processing Status*@
if ((!string.IsNullOrEmpty(Model.ProcessingStatusMessage)) && (Model.ProcessingStatus)) {
    <div class="row">
        <div class="alert alert-success alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.Raw(Model.ProcessingStatusMessage)
            </p>
        </div>
    </div>
}

    @*Display Processing Status*@
if ((!string.IsNullOrEmpty(Model.ProcessingStatusMessage)) && (!Model.ProcessingStatus)) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
            <p>
                @Html.Raw(Model.ProcessingStatusMessage)
            </p>
        </div>
    </div>
}

if (Model.FormMode == FormModeOption.DELETE) {
    @Html.HiddenFor(x => x.DocumentTypeId)
    @Html.HiddenFor(x => x.EmployeeRecordId)
    @Html.HiddenFor(x => x.ManagerRecordId)

        <div class="row">
            <div class="alert alert-danger alert-dismissable">
                <p>
                    @{ 
                        var employeeName = Model.Employees.FirstOrDefault(x => x.ValueText == Model.EmployeeRecordId.ToString()).DisplayText;
                        var managerName = Model.Managers.FirstOrDefault(x => x.ValueText == Model.ManagerRecordId.ToString()).DisplayText;
                    }
                    Are you sure you want to remove employee (@employeeName) - Manager(@managerName) Link?
                </p>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-7">

            @if (Model.FormMode != FormModeOption.DELETE) {
                <div class="row">
                    @Html.Label("Employee", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("EmployeeRecordId", new SelectList(Model.Employees, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Employee"), new { @class = "form-control", @required = true })
                </div>
                <div class="row">
                    @Html.Label("Manager", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("ManagerRecordId", new SelectList(Model.Managers, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Manager"), new { @class = "form-control", @required = true })
                </div>

                <div class="row">
                    @Html.Label("Document Type", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("DocumentTypeId", new SelectList(Model.DocumentTypes, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Document Type"), new { @class = "form-control", @required = true })
                </div>
            }
            else {
                <div class="row">
                    @Html.Label("Employee", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("EmployeeRecordId", new SelectList(Model.Employees, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Employee"), new { @class = "form-control", @disabled = "disabled" })
                </div>
                <div class="row">
                    @Html.Label("Manager", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("ManagerRecordId", new SelectList(Model.Managers, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Manager"), new { @class = "form-control", @disabled = "disabled" })
                </div>

                <div class="row">
                    @Html.Label("Document Type", htmlAttributes: new { @class = "control-label" })<br />
                    @Html.DropDownList("DocumentTypeId", new SelectList(Model.DocumentTypes, "ValueText", "DisplayText"), string.Format("- Please Select {0} -", "Document Type"), new { @class = "form-control", @disabled = "disabled" })
                </div>
            }
            <br />
            <div class="row">
                <a href="@Url.Action("ReviewReportingStructure", "Administration")" class="btn btn-md btn-primary" role="button">
                    <span class="glyphicon glyphicon-chevron-left glyphicon-chevron-left">
                    </span>&nbsp;Back To Link Employee To Manager Listing
                </a>
                    @switch (Model.FormMode) {
                        case FormModeOption.CREATE: {
                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-primary">
                                    <span class="glyphicon glyphicon-plus">
                                    </span>&nbsp;Create Employee Manager
                                </button>
                                break;
                            }
                        case FormModeOption.EDIT: {
                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-primary">
                                    <span class="glyphicon glyphicon-pencil">
                                    </span>&nbsp;Update Employee Manager Details
                                </button>
                                break;
                            }
                        case FormModeOption.DELETE: {
                                <button id="SubmitCreateEmployee" type="submit" class="btn btn-md btn-danger">
                                    <span class="glyphicon glyphicon-remove">
                                    </span>&nbsp;Remove Employee Manager Record
                                </button>
                                break;
                            }
                        default: {
                                break;
                            }
                    }
            </div>
            <br />
        </div>
    </div>
}